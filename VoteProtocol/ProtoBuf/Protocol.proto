//
//
//

import "Protocol.inc.proto";
import "Vote.inc.proto";
import "Shogi.inc.proto";

package VoteSystem.Protocol;

// 真偽値オブジェクトです。protobuf.netではbool?を
// 直接扱えないためこのようにしました。
message BoolObject {
	required bool Value = 1;
}

// ニココメンターのログインタイプです。
enum NicoLoginType {
	NotLogined = 0;
	Normal = 1;
	Premium = 2;
}

// 放送ルームへの操作IDです。
enum LiveOperation {
	LiveNone = 0;
	LiveAdd = 1;
	LiveRemove = 2;
	LiveSetAttribute = 3;
	LiveGetAttribute = 4;
}

// コレクションの変化を通知します。
enum CollectionOperation {
	CollectionAdd = 0;
	CollectionRemove = 1;
	CollectionReplace = 2;
}


///////////////////////////////////////////////////////////
//
// サーバーへのリクエストです。
// リクエストとは応答を要するサーバーへの指示のことです。
//

// 既存の投票部屋がいくつあるかを取得します。
message GetVoteRoomCountRequest {
}

message GetVoteRoomCountResponse {
	required int32 Count = 1;
}


// 既存の投票部屋の情報を取得します。
message GetVoteRoomListRequest {
	required int32 FromIndex = 1;
	required int32 ToIndex = 2;
}

message GetVoteRoomListResponse {
	repeated Vote.VoteRoomInfo RoomInfoList = 1;
}


// 投票参加者の属性を設定します。
message SetParticipantAttributeRequest {
	optional BoolObject IsUseAsNicoCommenter = 1;
	optional bool IsSetLoginType = 2;
	optional NicoLoginType LoginType = 3;
	optional string Message = 4;
	optional bool HasMessage = 5;
}

message SetParticipantAttributeResponse {
	required Vote.VoteParticipantInfo Info = 1;
}


// 放送主やその放送の情報を取得します。
message LiveOperationRequest {
	required LiveOperation Operation = 1;
	required LiveData LiveData = 2;
	optional LiveAttribute Attribute = 3;
}

message LiveOperationResponse {
	required LiveOperation Operation = 1;
	required LiveData LiveData = 2;
	required LiveAttribute Attribute = 3;
}


// 接続の切断要求を出します。
message DisconnectRequest {
}

message DisconnectResponse {
}


// 投票部屋作成要求を出します。
message CreateVoteRoomRequest {
	required string RoomName = 1;
	optional string Password = 2;
	
	required string OwnerName = 10;
	required string ImageUrl = 11;
	required string OwnerId = 12;
}

message CreateVoteRoomResponse {
	required Vote.VoteRoomInfo RoomInfo = 1;
	required int32 ParticipantNo = 2;
}


// 既存の投票部屋に入室します。
// ロビーサーバーのみが処理可能です。
message EnterVoteRoomRequest {
	required int32 RoomId = 1;
	optional string Password = 2;
	
	required string ParticipantName = 10;
	required string ImageUrl = 11;
	required string ParticipantId = 12;
}

message EnterVoteRoomResponse {
	required Vote.VoteRoomInfo RoomInfo = 1;
	required int32 ParticipantNo = 2;
}


// 投票者一覧を取得します。
message GetVoterListRequest {
}

message GetVoterListResponse {
	required Vote.VoterList VoterList = 1;
}


// 投票部屋から退出します。
message LeaveVoteRoomRequest {
}

message LeaveVoteRoomResponse {
}


///////////////////////////////////////////////////////////
//
// コマンドは応答のない指示です。
//

// 投票ルームの状態を取得します。
// クライアントからサーバーに送られます。
message GetVoteRoomInfoCommand {
}

// 投票ルームの状態が変わった時に送信します。
// サーバーからクライアントに送られます。
message SendVoteRoomInfoCommand {
	required Vote.VoteRoomInfo RoomInfo = 1;
}

// 投票ルームに入室中の参加者の状態が変わった時に送信します。
// サーバーからクライアントに送られます。
message ChangeParticipantInfoCommand {
	required CollectionOperation Operation = 1;
	required Vote.VoteParticipantInfo Info = 2;
	required int32 ListCount = 3;
}

// 投票結果を送信します。
// サーバーからクライアントに送られます。
message SendVoteResultCommand {
	required Vote.VoteResult Result = 1;
}

// 投票モードの変更を行います。
// クライアントからサーバーに送られます。
message ChangeVoteModeCommand {
	required Vote.VoteMode VoteMode = 1;
	required bool IsMirrorMode = 2;
}

// 投票を開始します。
// クライアントからサーバーに送られます。
message StartVoteCommand {
	optional double Seconds = 1;
}

// 投票を一時停止します。
// クライアントからサーバーに送られます。
message PauseVoteCommand {
}

// 投票を停止します。
// クライアントからサーバーに送られます。
message StopVoteCommand {
	required double AddTotalTimeSeconds = 1;
}

// 投票時間を設定します。
// クライアントからサーバーに送られます。
message SetVoteSpanCommand {
	required double Seconds = 1;
}

// 投票時間を延長します。
// （負数ならその分だけ時間を減らします）
// クライアントからサーバーに送られます。
message AddVoteSpanCommand {
	required double DiffSeconds = 1;
}

// 全投票時間を設定します。
// クライアントからサーバーに送られます。
message SetTotalVoteSpanCommand {
	required double Seconds = 1;
}

// 全投票時間を延長します。
// （負数ならその分だけ時間を減らします）
// クライアントからサーバーに送られます。
message AddTotalVoteSpanCommand {
	required double DiffSeconds = 1;
}

// 時間延長・短縮に関する設定を行います。
// クライアントからサーバーに送られます。
message SetTimeExtendSettingCommand {
	optional int32 VoteEndCount = 1;
	optional int32 VoteExtendTimeSeconds = 2;
}

// 投票結果のクリアを行います。
// クライアントからサーバーに送られます。
message ClearVoteCommand {
}

// 投票やプレイヤーの登録などを行う各種メッセージを送信します。
// サーバー、クライアント双方に送られます。
message NotificationCommand {
	required Notification Notification = 1;

	// 放送のコメントすべてが通知として放送主から送られてくるため、
	// 放送主が投稿したものだけを特別扱いする必要があります。
	required bool IsFromLiveOwner = 2;
}

// エンドロールの開始メッセージを送信します。
// サーバー、クライアント双方に送られます。
message StartEndRollCommand {
//	required double RollTimeSeconds = 1;
	required int64 StartTimeNtpTicks = 2;
}

// エンドロールの停止メッセージを送信します。
// サーバー、クライアント双方に送られます。
message StopEndRollCommand {
}


///////////////////////////////////////////////////////////
//
// 将棋専用
//

// 現局面を取得します。
// クライアントからサーバーに送られます。
message ShogiGetCurrentBoardRequest {
}

message ShogiGetCurrentBoardResponse {
	required Ragnarok.Shogi.Board Board = 1;
}

// 現局面を設定します。
// クライアント、サーバー双方から送られます。
message ShogiSetCurrentBoardCommand {
	required Ragnarok.Shogi.Board Board = 1;
}


// 変化を送信します。
// サーバーからクライアントに送られます。
message ShogiSendVariationCommand {
	repeated Ragnarok.Shogi.Move MoveList = 1;
	required string Note = 2;
	optional int32 Id = 3;
	optional int32 NextId = 4;
}


// 大合神クジラちゃんの参加者を取得します。
// クライアントからサーバーに送られます。
message ShogiGetWhaleClientListCommand {
}

// 大合神クジラちゃんの参加者が変わったことを通知します。
// サーバーからクライアントに送られます。
message ShogiSetWhaleClientListCommand {
	repeated string NameList = 1;
	required double Value = 2;
}
